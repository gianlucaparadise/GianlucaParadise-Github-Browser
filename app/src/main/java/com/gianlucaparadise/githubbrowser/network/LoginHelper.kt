package com.gianlucaparadise.githubbrowser.network

import android.net.Uri
import com.gianlucaparadise.githubbrowser.BuildConfig
import com.gianlucaparadise.githubbrowser.data.AccessTokenModel
import java.util.*

private const val GITHUB_AUTHORIZATION_ENDPOINT = "https://github.com/login/oauth/authorize"
private const val GITHUB_AUTHORIZATION_CALLBACK_URL = "https://githubbrowser.gianlucaparadise.com/callbackUrl"
private const val STATE_QUERY_PARAM_NAME = "state"

/**
 * This class helps the Github login flow process. In order to use this class you should follow these steps:
 * 1. Get an AuthorizationDescriptor using the method `buildAuthorizationDescriptor`.
 * 2. Display a webview loading the `authUrl` property inside the `AuthorizationDescriptor`.
 * 3. Everytime the URL changes, try to get a `LoginDescriptor` using the method `buildLoginDescriptor`.
 * 4. Once you get a `LoginDescriptor` from Step#3, you can stop the WebView
 * 5. Using the `LoginDescriptor` received from Step#4, get the access token using the method `retrieveAccessToken`
 * 6. Now you can save the access token and use it for your API calls
 */
object LoginHelper {

    private val baseAuthUrlBuilder: Uri.Builder = Uri
        .parse(GITHUB_AUTHORIZATION_ENDPOINT)
        .buildUpon()
        .appendQueryParameter("client_id", BuildConfig.CLIENT_ID)
        .appendQueryParameter("allow_signup", "false")
        .appendQueryParameter("scope", "repo")

    private fun getAuthUrlWithState(state: String): String {
        return baseAuthUrlBuilder
            .appendQueryParameter(STATE_QUERY_PARAM_NAME, state)
            .build()
            .toString()
    }

    /**
     * Creates a descriptor with the needed information to start the login flow
     */
    fun buildAuthorizationDescriptor(): AuthDescriptor {
        val state = UUID.randomUUID().toString()
        val authUrl = getAuthUrlWithState(state)

        return AuthDescriptor(
            authUrl = authUrl,
            state = state
        )
    }

    /**
     * Checks if the url is the expected one
     *
     * @param url Url from webview login flow
     * @param authDescriptor AuthDescriptor used to start the login flow. This is generated by buildAuthorizationDescriptor() method
     * @return Null if input url isn't the correct one and if state doesn't match
     */
    fun isAppAuthorized(url: Uri?, authDescriptor: AuthDescriptor): Boolean {
        // First I check if the URL is the callback url
        if (url == null) return false
        if (!url.toString().startsWith(GITHUB_AUTHORIZATION_CALLBACK_URL)) return false

        val state = url.getQueryParameter(STATE_QUERY_PARAM_NAME)
        // state must be the same as previous to protect against cross-site request forgery attacks
        if (state != authDescriptor.state) return false

        // This should also recognize and throw login errors, but I can't find documentation about login error
        return true
    }

    /**
     * If the url is the expected one, this method returns the a descriptor with the information needed to request an access token
     *
     * @param url Url from webview login flow
     * @param authDescriptor AuthDescriptor used to start the login flow. This is generated by buildAuthorizationDescriptor() method
     * @return Null if input url isn't the correct one and if state doesn't match
     */
    fun buildLoginDescriptor(url: Uri?, authDescriptor: AuthDescriptor): LoginDescriptor? {
        if (!isAppAuthorized(url, authDescriptor)) return null

        // I'm sure I have a state and a URL because they have been checked inside `isAppAuthorized` method
        val state = url!!.getQueryParameter(STATE_QUERY_PARAM_NAME)!!
        val code = url.getQueryParameter("code") ?: return null

        return LoginDescriptor(state, code)
    }

    suspend fun retrieveAccessToken(loginDescriptor: LoginDescriptor): AccessTokenModel {
        return BackendService.retrieveAccessToken(loginDescriptor.code, loginDescriptor.state)
    }

    data class AuthDescriptor(
        /**
         * Authorization Url to start Login Flow in webview
         */
        val authUrl: String,
        /**
         * An unguessable random string. It is used to protect against cross-site request forgery attacks.
         */
        val state: String,
        /**
         * Login Code used to request an access token
         */
        val code: String? = null
    )

    data class LoginDescriptor(
        /**
         * An unguessable random string. It is used to protect against cross-site request forgery attacks.
         */
        val state: String,
        /**
         * Login Code used to request an access token
         */
        val code: String
    )
}